Angular 2 first App

1. Install Node.js
   Before you begin, make sure your development environment includes Node.js and an npm package manager.
  * Node.js
    Angular requires a current, active LTS, or maintenance LTS version of Node.js

2. Install TypeScript from Node.js
	$ npm install -g typescript
	
3. Install Angular-CLI (allow users to create and manage projects from the command line)
	$ npm install -g angular-cli@1.0.0-beta.18
	
4. Creates a new project
	$ ng new angular2_hello_world
	
5. Craete a new component
    $ ng generate component heroes
	
6. Using the Angular CLI, create a service called hero
	$ ng generate service hero
	
7. Generate a routing module
	$ ng generate module app-routing --flat --module=app
		--flat puts the file in src/app instead of its own folder.
		--module=app tells the CLI to register it in the imports array of the AppModule.
		
8. Install the In-memory Web API package from npm
	$ npm install angular-in-memory-web-api --save 
	
	
	
Angular proect summary (tour-of-heroes) - https://angular.io/tutorial

 * The Application Shell
	- You created the initial application structure using the Angular CLI.
	- You learned that Angular components display data.
	- You used the double curly braces of interpolation to display the app title.
	
 * The Hero Editor		
	- You used the CLI to create a second HeroesComponent.
	- You displayed the HeroesComponent by adding it to the AppComponent shell.
	- You applied the UppercasePipe to format the name.
	- You used two-way data binding with the ngModel directive.
	- You learned about the AppModule.
	- You imported the FormsModule in the AppModule so that Angular would recognize and apply the ngModel directive.
	- You learned the importance of declaring components in the AppModule and appreciated that the CLI declared it for you.
	
 * Display a Heroes List
	- The Tour of Heroes app displays a list of heroes in a Master/Detail view.
	- The user can select a hero and see that hero's details.
	- You used *ngFor to display a list.
	- You used *ngIf to conditionally include or exclude a block of HTML.
	- You can toggle a CSS style class with a class binding. 

 * Master/Detail Components	
	- You created a separate, reusable HeroDetailComponent.
	- You used a property binding to give the parent HeroesComponent control over the child HeroDetailComponent.
	- You used the @Input decorator to make the hero property available for binding by the external HeroesComponent.	
	
 * Services
	- You refactored data access to the HeroService class.
	- You registered the HeroService as the provider of its service at the root level so that it can be injected anywhere in the app.
	- You used Angular Dependency Injection to inject it into a component.
	- You gave the HeroService get data method an asynchronous signature.
	- You discovered Observable and the RxJS Observable library.
	- You used RxJS of() to return an observable of mock heroes (Observable<Hero[]>).
	- The component's ngOnInit lifecycle hook calls the HeroService method, not the constructor.
	- You created a MessageService for loosely-coupled communication between classes.
	- The HeroService injected into a component is created with another injected service, MessageService.
	
 * Routing
	- You added the Angular router to navigate among different components.
	- You turned the AppComponent into a navigation shell with <a> links and a <router-outlet>.
	- You configured the router in an AppRoutingModule
	- You defined simple routes, a redirect route, and a parameterized route.
	- You used the routerLink directive in anchor elements.
	- You refactored a tightly-coupled master/detail view into a routed detail view.
	- You used router link parameters to navigate to the detail view of a user-selected hero.
	- You shared the HeroService among multiple components.	
	
	